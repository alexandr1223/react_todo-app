{"version":3,"sources":["types/SortBy.ts","api/api.ts","components/TodoApp/TodoApp.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","App.tsx","hook/useLocalStorage.tsx","index.js"],"names":["SortBy","request","url","options","fetch","then","res","ok","Error","json","changeTodoStatus","isCompleted","method","headers","body","JSON","stringify","completed","deleteTodo","TodoApp","setTodos","useState","inputValue","setInputValue","addTodo","e","title","preventDefault","userId","resp","todos","id","onSubmit","type","className","placeholder","value","onChange","evt","target","TodoItem","item","isEditing","setEditing","editingValue","setEditingValue","useContext","TodoData","useEffect","handleKey","event","keyCode","deleteTodoHandler","changeTitle","window","addEventListener","removeEventListener","todoId","newTitle","changeTodoTitle","map","todo","filter","ClassNames","editing","checked","onDoubleClick","onClick","onBlur","handleBlur","onKeyPress","key","TodoList","items","sortBy","visibleTodos","TodosFilter","setSortBy","classNames","selected","All","Active","Completed","React","createContext","App","initialValue","localStorage","getItem","parse","error","storedValue","setStoredValue","toStore","Function","setItem","useLocalStorage","toggleStatus","setToggleStatus","data","isEveryToggle","every","contextValue","curr","htmlFor","Provider","length","forEach","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a4de051.chunk.js","sourcesContent":["export enum SortBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const userId = 3643;\n\nexport const request = (url: string, options: any) => fetch(`${BASE_URL}${url}`, options)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error('Error with loading data...');\n    }\n\n    return res.json();\n  });\n\n// Add new todo\nexport const addNewTodo = (url: string, title: string) => request(\n  url,\n  {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      title,\n      userId,\n      completed: false,\n    }),\n  },\n);\n\n// Change todo status completed\nexport const changeTodoStatus = (url: string, isCompleted: boolean) => request(\n  url,\n  {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      { completed: isCompleted },\n    ),\n  },\n);\n\n// Change todo title\nexport const changeTodoTitle = (url: string, newTitle: string) => request(\n  url,\n  {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      { title: newTitle },\n    ),\n  },\n);\n\n// Delete todo\nexport const deleteTodo = (url: string) => request(\n  url,\n  {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n  },\n);\n\n// export const createUser = (url: string) => request(\n//   url,\n//   {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({\n//       \"name\": \"Alex\",\n//       \"username\": \"yavis\",\n//       \"email\": \"testt@example.com\",\n//       \"phone\": \"1234567890\"\n//     }),\n//   },\n// )\n","import React, { useState } from 'react';\nimport { addNewTodo } from '../../api/api';\nimport { TodosType } from '../../types/TodosType';\n\ntype Props = {\n  setTodos: (todos: any) => void;\n};\n\nexport const TodoApp: React.FC<Props> = ({ setTodos }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const addTodo = (e: any) => {\n    e.preventDefault();\n\n    addNewTodo('todos/?userId=3644', inputValue)\n      .then((resp) => {\n        setTodos((todos: TodosType[]) => (\n          [...todos,\n            {\n              id: +resp.id,\n              title: `${resp.title}`,\n              completed: false,\n            },\n          ]\n        ));\n      });\n\n    setInputValue('');\n  };\n\n  return (\n    <form\n      onSubmit={e => addTodo(e)}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={inputValue}\n        onChange={evt => setInputValue(evt.target.value)}\n      />\n    </form>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport ClassNames from 'classnames';\nimport { TodosType } from '../../types/TodosType';\n// eslint-disable-next-line import/no-cycle\nimport { TodoData } from '../../App';\n\nimport {\n  changeTodoStatus,\n  changeTodoTitle,\n  deleteTodo,\n} from '../../api/api';\n\ntype Props = {\n  item: TodosType;\n}\n\nexport const TodoItem: React.FC<Props> = ({\n  item,\n}) => {\n  const [isEditing, setEditing] = useState<boolean>(false);\n  const [editingValue, setEditingValue] = useState<string>(item.title);\n\n  const { setTodos } = useContext(TodoData);\n\n  const handleEditing = () => {\n    setEditing(true);\n  };\n\n  useEffect(() => {\n    const handleKey = (event: any) => {\n      if (event.keyCode === 27) {\n        if (item.title === '') {\n          deleteTodoHandler(item.id);\n        }\n\n        changeTitle(item.id, editingValue);\n        setEditing(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKey);\n\n    return () => {\n      window.removeEventListener('keydown', handleKey);\n    };\n  }, []);\n\n  const changeStatus = (todoId: number, isCompleted: boolean) => {\n    changeTodoStatus(`todos/${todoId}`, isCompleted)\n      .then(() => {\n        setTodos((todos: TodosType[]) => todos.map((todo: TodosType) => (\n          todo.id === todoId\n            ? { ...todo, completed: !todo.completed }\n            : todo)));\n      });\n  };\n\n  const changeTitle = (todoId: number, newTitle: string) => {\n    changeTodoTitle(`todos/${todoId}`, newTitle)\n      .then(() => {\n        setTodos((todos: TodosType[]) => todos.map((todo: TodosType) => (\n          todo.id === todoId\n            ? { ...todo, title: newTitle }\n            : todo)));\n      });\n  };\n\n  const deleteTodoHandler = (todoId: number) => {\n    deleteTodo(`todos/${todoId}`)\n      .then(() => {\n        setTodos((todos: TodosType[]) => todos.filter((todo: TodosType) => (\n          todo.id !== todoId\n        )));\n      });\n  };\n\n  const handleBlur = (evt: any) => {\n    if (evt.target.value === '') {\n      deleteTodoHandler(item.id);\n      setEditing(false);\n    } else {\n      changeTitle(item.id, editingValue);\n      setEditing(false);\n    }\n  };\n\n  const handleKey = (evt: any) => {\n    if (evt.key === 'Enter') {\n      if (evt.target.value === '') {\n        deleteTodoHandler(item.id);\n        setEditing(false);\n      } else {\n        setEditing(false);\n      }\n    }\n\n    if (evt.keyCode === 27) {\n      setEditing(false);\n    }\n  };\n\n  return (\n    <li\n      className={ClassNames(\n        { completed: item.completed },\n        { editing: isEditing },\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={item.completed}\n          id={item.completed ? 'toggle-completed' : 'toggle-view'}\n          onChange={() => changeStatus(item.id, !item.completed)}\n        />\n        <label onDoubleClick={handleEditing}>\n          {item.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => deleteTodoHandler(item.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editingValue}\n        onChange={evt => setEditingValue(evt.target.value)}\n        onBlur={evt => handleBlur(evt)}\n        onKeyPress={evt => handleKey(evt)}\n      />\n    </li>\n  );\n};\n","import React from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { TodoItem } from '../TodoItem';\nimport { TodosType } from '../../types/TodosType';\n\ntype Props = {\n  items: TodosType[];\n  sortBy: string;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  items,\n  sortBy,\n}) => {\n  let visibleTodos = [...items];\n\n  switch (sortBy) {\n    case 'active':\n      visibleTodos = visibleTodos.filter(todo => todo.completed === false);\n      break;\n    case 'completed':\n      visibleTodos = visibleTodos.filter(todo => todo.completed === true);\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {visibleTodos && visibleTodos.map(item => (\n        <TodoItem\n          key={item.id}\n          item={item}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { SortBy } from '../../types/SortBy';\n\ntype Props = {\n  sortBy: string,\n  setSortBy: (sort: SortBy) => void;\n}\n\nexport const TodosFilter: React.FC<Props> = ({ sortBy, setSortBy }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames(\n          { selected: sortBy === SortBy.All },\n        )}\n        onClick={() => setSortBy(SortBy.All)}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames(\n          { selected: sortBy === SortBy.Active },\n        )}\n        onClick={() => setSortBy(SortBy.Active)}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames(\n          { selected: sortBy === SortBy.Completed },\n        )}\n        onClick={() => setSortBy(SortBy.Completed)}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n","import React, { useState, useEffect } from 'react';\nimport { TodoApp } from './components/TodoApp';\n// eslint-disable-next-line import/no-cycle\nimport { TodoList } from './components/TodoList';\nimport { TodosType } from './types/TodosType';\nimport { TodosFilter } from './components/TodosFilter';\nimport { useLocalStorage } from './hook/useLocalStorage';\nimport { deleteTodo, userId, changeTodoStatus } from './api/api';\nimport { SortBy } from './types/SortBy';\n\nexport const TodoData = React.createContext<any>({});\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [toggleStatus, setToggleStatus] = useState(false);\n  const [sortBy, setSortBy] = useState(SortBy.All);\n\n  useEffect(() => {\n    fetch(`https://mate.academy/students-api/todos/?userId=${userId}`)\n      .then(resp => resp.json())\n      .then((data) => {\n        setTodos(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const isEveryToggle = todos.every((todo: TodosType) => (\n      todo.completed === true\n    ));\n\n    if (isEveryToggle) {\n      setToggleStatus(true);\n    } else {\n      setToggleStatus(false);\n    }\n  }, [todos]);\n\n  const contextValue: any = { setTodos };\n\n  const notCompletedCount = () => (\n    todos.length > 0\n      ? todos.filter((item: TodosType) => !item.completed).length\n      : 0\n  );\n\n  const completedCount = () => (\n    todos.length > 0\n      ? todos.filter((item: TodosType) => item.completed).length\n      : ''\n  );\n\n  const clearCompleted = () => {\n    todos.forEach((todo: TodosType) => {\n      if (todo.completed === true) {\n        deleteTodo(`todos/${todo.id}`)\n          .then(setTodos(todos.filter((item: TodosType) => (\n            item.completed !== true\n          ))));\n      }\n    });\n  };\n\n  const toggleAll = () => {\n    setTodos((curr: TodosType[]) => curr.map((item: TodosType) => {\n      if (item.completed !== !toggleStatus) {\n        changeTodoStatus(`todos/${item.id}`, !toggleStatus);\n\n        return { ...item, completed: !toggleStatus };\n      }\n\n      return item;\n    }));\n\n    setToggleStatus(!toggleStatus);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp setTodos={setTodos} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          checked={toggleStatus}\n          className=\"toggle-all\"\n          onChange={() => (toggleAll())}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoData.Provider value={contextValue}>\n          <TodoList\n            items={todos}\n            sortBy={sortBy}\n          />\n        </TodoData.Provider>\n\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\" data-cy=\"todosCounter\">\n          {`${notCompletedCount()} items left`}\n        </span>\n\n        <TodosFilter sortBy={sortBy} setSortBy={setSortBy} />\n\n        {completedCount() > 0\n          && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )\n        }\n      </footer>\n    </section>\n  );\n};\n\nexport default App;\n","import { useState } from 'react';\nimport { TodosType } from '../types/TodosType';\n\nexport const useLocalStorage = (key: string, initialValue: TodosType[]) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: TodosType[]) => {\n    try {\n      const toStore = value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(toStore);\n\n      window.localStorage.setItem(key, JSON.stringify(toStore));\n    } catch (error) {\n      throw new Error('Error');\n    }\n  };\n\n  return [storedValue, setValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}